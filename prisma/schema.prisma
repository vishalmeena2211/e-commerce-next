// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  avatar        String?
  bio           String?
  location      String?
  memberSince   DateTime  @default(now())
  role          Role      @default(CUSTOMER)
  emailVerified Boolean   @default(false)
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist?
  addresses     Address[]
  payments      Payment[]
  notifications Notification[]
  settings      UserSettings?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserSettings {
  id                 String  @id @default(cuid())
  user               User    @relation(fields: [userId], references: [id])
  userId             String  @unique
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  profileVisibility  Visibility @default(PUBLIC)
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  orderItems    OrderItem[]
  totalAmount   Float
  status        OrderStatus
  shippingAddress Address   @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  paymentMethod Payment     @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  brand       Brand       @relation(fields: [brandId], references: [id])
  brandId     String
  inventory   Int
  orderItems  OrderItem[]
  reviews     Review[]
  wishlistItems WishlistItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id     String         @id @default(cuid())
  user   User           @relation(fields: [userId], references: [id])
  userId String         @unique
  items  WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  addedAt   DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Address {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  type    AddressType
  street  String
  city    String
  state   String
  zipCode String
  country String
  isDefault Boolean @default(false)
  orders  Order[]
}

model Payment {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  type           PaymentType
  provider       String?
  accountNumber  String?
  expiryDate     DateTime?
  isDefault      Boolean      @default(false)
  orders         Order[]
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum NotificationType {
  ORDER_STATUS
  PROMOTION
  ACCOUNT
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}